package org.baattezu.telegrambotdemo.bot.input;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.baattezu.telegrambotdemo.data.CallbackType;
import org.baattezu.telegrambotdemo.data.UserGoalData;
import org.baattezu.telegrambotdemo.data.UserState;
import org.baattezu.telegrambotdemo.model.Goal;
import org.baattezu.telegrambotdemo.service.GoalService;
import org.baattezu.telegrambotdemo.service.UserService;
import org.baattezu.telegrambotdemo.utils.BotMessagesEnum;
import org.baattezu.telegrambotdemo.utils.JsonHandler;
import org.baattezu.telegrambotdemo.utils.TelegramBotHelper;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoField;
import java.util.ArrayList;
import java.util.List;

@Component
@RequiredArgsConstructor
@Slf4j
public class UserInputHandlerWithoutDate {


    private final UserService userService;
    private final GoalService goalService;

    public Object handleMessage(Update update) {
        Long userId = update.getMessage().getFrom().getId();
        Long chatId = update.getMessage().getChatId();
        String messageText = update.getMessage().getText();

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        UserGoalData data = goalService.getUserState(userId);
        UserState state = data.userState();

        Object responseMessage = null;

        int messageLength = messageText.length();
        int remainingCharacters = 255 - messageLength;

        if (data != null){
            Goal goal = goalService.getGoalById(data.goalId());
            switch (state) {
                case WAITING_FOR_TITLE:
                    if (messageText.length() > 255){
                        return new SendMessage(String.valueOf(chatId),
                                "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –Ω–∞: " + Math.abs(remainingCharacters) + " —Å–∏–º–≤–æ–ª–æ–≤." +
                                        "\n‚úÇÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–æ—Ä–æ—Ç–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–ª—å—é. üòÖ");
                    }
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª—å
                    goalService.setGoalName(goal, messageText);
                    goalService.setUserState(userId, UserState.WAITING_FOR_REWARD, data.goalId());
                    responseMessage = new SendMessage(String.valueOf(chatId), "‚ú® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ.");
                    break;

                case WAITING_FOR_REWARD:
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º
                    goalService.setGoalReward(goal, messageText);

                    var thisWeek = LocalDateTime.now().with(ChronoField.DAY_OF_WEEK, 7).withHour(23).withMinute(59);
                    goalService.setGoalDeadline(goal, thisWeek);

                    goalService.clearUserState(userId);  // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
                    responseMessage = new SendMessage(String.valueOf(chatId), "üéØ –¶–µ–ª—å –Ω–∞ –Ω–µ–¥–µ–ª—é —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –£—Å–ø–µ—Ö–æ–≤! üí™‚ú®");
                    break;
                case WAITING_FOR_RESULTS:

                    if (messageText.length() > 255){
                        return new SendMessage(String.valueOf(chatId),
                                "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –Ω–∞: " + Math.abs(remainingCharacters) + " —Å–∏–º–≤–æ–ª–æ–≤." +
                                        "\n‚úÇÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–æ—Ä–æ—Ç–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏. üòÖ");
                    }
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–µ–¥–ª–∞–π–Ω—É
                    userService.writeResultsForWeek(userId, messageText);
                    goalService.clearUserState(userId);  // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å

                    var editMessage = new EditMessageText();
                    editMessage.setText(BotMessagesEnum.MY_RESULTS.getMessage(messageText));
                    editMessage.setMessageId(Math.toIntExact(data.goalId()));
                    editMessage.setChatId(update.getMessage().getChatId());
                    TelegramBotHelper.addResultsButtons(editMessage, userId);
                    responseMessage = editMessage;
//                    responseMessage = new SendMessage(String.valueOf(chatId), "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —Å–≤–æ–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏! üìä –û–∂–∏–¥–∞–π—Ç–µ –æ–±—â—É—é —Ç–∞–±–ª–∏—Ü—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–Ω—Ü–µ –Ω–µ–¥–µ–ª–∏. üëç");
                    break;
                default:
                    responseMessage = new SendMessage(String.valueOf(chatId), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.");
                    break;
            }
        }
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        return responseMessage;
    }


}
